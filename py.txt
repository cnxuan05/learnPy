练习基本操作

'''
from compiler.ast import flatten
mob = ['a',['b','c'],'d']
for x in flatten(mob):
    print x
'''
#####



'''
# coding:utf-8
def jd_day(year, month, day):
    # 格里历转儒略历 -4713 1 1
    a = int((14 - month) / 12)
    y = year + 4800 - a
    m = month + 12 * a - 3
    # s = 0.0000115740 一秒对应的儒略历
    data = int((153 * m + 2) / 5) + 365 * y + int(y / 4) - int(y / 100) + int(y / 400) + day - 32045
    # data = int((153 * m + 2) / 5) + 365 * y + int(y / 4) + day - 32083
    return data


import math

L = lambda year: int((year - 1) / 4) - int((year - 1) / 100) + int((year - 1) / 400)
# Date = int(2017 * 0.2422 + 4.475) - L(2017)
F = lambda year, x: 365.242 * (year - 1900) + 6.2 + 15.22 * x - 1.9 * math.sin(0.262 * x)

d = [
    0.00,
    1272494.40,
    2548020.60,
    3830143.80,
    5120226.60,
    6420865.80,
    7732018.80,
    9055272.60,
    10388958.00,
    11733065.40,
    13084292.40,
    14441592.00,
    15800560.80,
    17159347.20,
    18513766.20,
    19862002.20,
    21201005.40,
    22529659.80,
    23846845.20,
    25152606.00,
    26447687.40,
    27733451.40,
    29011921.20,
    30285477.60
]

print d
#1900 1 6 0.:05:00
base = 2415025.5868055555
da = 365.24219878 *(2016 - 1900) + d[1]/86400.0
print da
'''
####

'''
from kivy.app import App
from kivy.uix.button import Button


class TestApp(App):
    def build(self):
        return Button(text='Hello,kivy')


TestApp().run()
'''
#####
'''
# coding:utf-8
a = '癸甲乙丙丁戊己庚辛壬'
b = '亥子丑寅卯辰巳午未申酉戌'
c = []

def ver1(s):
    # utf-8 把汉字分解成一个个汉字
    ss = [s[i:i + 3] for i in range(len(s)) if i % 3 == 0]
    return ss  # ','.join(ss)


def jd_day(year, month, day):
    # 格里历转儒略历 -4713 1 1
    a = int((14 - month) / 12)
    y = year + 4800 - a
    m = month + 12 * a - 3
    # s = 0.0000115740 一秒对应的儒略历
    data = int((153 * m + 2) / 5) + 365 * y + int(y / 4) - int(y / 100) + int(y / 400) + day - 32045
    # data = int((153 * m + 2) / 5) + 365 * y + int(y / 4) + day - 32083
    return data


m = -1
n = -1
count = 0

while count < 60:
    count = count + 1
    m = (m + 1) % 10
    n = (n + 1) % 12
    c.append(ver1(a)[m] + ver1(b)[n])


ss = '丙子'
for i in range(len(c)):
    if i == 16:
        print i,c[i]

# 57 13 44 16 己卯
e = jd_day(1901,1,1) - jd_day(1,1,1)
print e%60
'''
#####
'''
a = '癸甲乙丙丁戊己庚辛壬'
b = '亥子丑寅卯辰巳午未申酉戌'



def vert2(s):
    ss = [s[i:i + 3] for i in range(len(s)) if i % 3 == 0]
    return ss  # ','.join(ss)
def get_60():
    m = 0
    n = 0
    count = 0
    sstring = []

    while count < 60:
        m = (m + 1) % 10
        n = (n + 1) % 12
        count = count + 1
        sstring.append(vert2(a)[m] + vert2(b)[n])
    return ','.join(sstring) + '\n'


fp = open('d.csv','w')
for u in range(1):
    ss = get_60()
    fp.write(ss)
fp.close()
print 'end'
'''
####

'''
# coding:utf-8


sstring0 = '癸甲乙丙丁戊己庚辛壬'
sstring1 = '亥子丑寅卯辰巳午未申酉戌'
sstring2 = '木火土金水'
sstring3 = '乾兑离震巽坤艮坎'
sstring4 = '猪鼠牛虎兔龙蛇马羊猴鸡狗'
sstring5 = '腊正二三四五六七八九十冬'
sstring6 = '初一初二初三初四初五初六初七初八初九初十十一十二十三十四十五十六十七十八十九二十廿一廿二廿三廿四廿五廿六廿七廿八廿九三十'
sstring7 = '小寒大寒立春雨水惊蛰春分清明谷雨立夏小满芒种夏至小暑大暑立秋处暑白露秋分寒露霜降立冬小雪大雪冬至'
# 公元前2697 甲子年甲子月甲子日甲子时 九星连珠
# 朔望月 29.5306 *12=354.3672 /365.2422 235- 12*19 = 7 /0.0892



# 藏干
data1 = [0x91, 0x0, 0x608, 0x135, 0x2, 0x520, 0x357, 0x46, 0x624, 0x759, 0x8, 0x584]
data2 = []


# 0 1 2 3 4 5 6 7 8 9
# 0 1 2 3 4 5 6 7 8 9 10 11
def ver1(s):
    # utf-8 把汉字分解成一个个汉字
    ss = [s[i:i + 3] for i in range(len(s)) if i % 3 == 0]
    return ss  # ','.join(ss)


def ver3(s):
    # utf-8 把汉字分解成一个个汉字
    ss = [s[i:i + 6] for i in range(len(s)) if i % 6 == 0]
    return ','.join(ss)


def jd_day(year, month, day):
    # 格里历转儒略历 -4713 1 1
    a = int((14 - month) / 12)
    y = year + 4800 - a
    m = month + 12 * a - 3
    # s = 0.0000115740 一秒对应的儒略历
    data = int((153 * m + 2) / 5) + 365 * y + int(y / 4) - int(y / 100) + int(y / 400) + day - 32045
    # data = int((153 * m + 2) / 5) + 365 * y + int(y / 4) + day - 32083
    return data


# a = [10.10.10.10.10.10.10.10.10.10.10.10.10.10.10.10.10.10.10.10.10.10.10.10.10.10.10.10.10.10.10.10.10]
# [31.28.31.30.31.30.31.31.30.31.30.31]
# [31.29.31.30.31.30.31.31.30.31.30.31]
def ver2(s):
    run_year = lambda data: 'yes' if (data % 4 == 0 and data % 100 != 0) or data % 400 == 0 else 'no'
    # print run_year(2012)

    # print jd_day(u+1, 12, 31) - jd_day(u+1, 1, 1) + 1

#print ver1(sstring4)[2012%10-3]
#print ver1(sstring4)[(2012-3)%12]
# print ver3(sstring6)
# print ver3(sstring7)

































'''
#####

'''
# coding:utf-8
def get_data(num, data):
    return data[num]
    pass


def get_rank(sstring, data):
    for u in range(len(data)):
        if data[u] == sstring:
            return u


def get_treat(a, b, data):
    rank_a = 100
    rank_b = -1
    for i in range(len(data)):

        if data[i] == a:
            rank_a = i
        if data[i] == b:
            rank_b = i
        if rank_b > rank_a:
            break

    if rank_b - rank_a == 1:
        return u'食傷'
    elif rank_b - rank_a == 2:
        return u'才财'
    elif rank_b - rank_a == 3:
        return u'官杀'
    elif rank_b - rank_a == 4:
        return u'印'
    elif rank_b - rank_a == 5:
        return u'比劫'


import math


def get_8zi(y, m, d, h):
    a0 = ['癸', '甲', '乙', '丙', '丁', '戊', '己', '庚', '辛', '壬']
    a1 = ['亥', '子', '丑', '寅', '卯', '辰', '巳', '午', '未', '申', '酉', '戌']
    c0 = ['', '', '', '', '', '', '', '']
    c0[0] = a0[y % 10 - 3]
    c0[1] = a1[(y - 3) % 12]
    b0 = get_rank(c0[0], a0)
    c0[2] = a0[(b0 * 2 + m) % 10 - 1]

    return c0

'''
#####


'''
# coding:utf-8







import math

def GetDayOf(st):
    #–天干名称
    cTianGan = ["甲","乙","丙","丁","戊","己","庚","辛","壬","癸"]
    #–地支名称
    cDiZhi = ["子","丑","寅","卯","辰","巳","午", "未","申","酉","戌","亥"]
    #–属相名称
    cShuXiang = ["鼠","牛","虎","兔","龙","蛇", "马","羊","猴","鸡","狗","猪"]
    #–农历日期名
    cDayName =[
        "*","初一","初二","初三","初四","初五",
        "初六","初七","初八","初九","初十",
        "十一","十二","十三","十四","十五",
        "十六","十七","十八","十九","二十",
        "廿一","廿二","廿三","廿四","廿五",
        "廿六","廿七","廿八","廿九","三十"
    ]
    #–农历月份名
    cMonName = ["*","正","二","三","四","五","六", "七","八","九","十","十一","腊"]
    #–公历每月前面的天数
    wMonthAdd = [0,31,59,90,120,151,181,212,243,273,304,334]
    #– 农历数据
    wNongliData = [2635,333387,1701,1748,267701,694,2391,133423,1175,396438
    ,3402,3749,331177,1453,694,201326,2350,465197,3221,3402
    ,400202,2901,1386,267611,605,2349,137515,2709,464533,1738
    ,2901,330421,1242,2651,199255,1323,529706,3733,1706,398762
    ,2741,1206,267438,2647,1318,204070,3477,461653,1386,2413
    ,330077,1197,2637,268877,3365,531109,2900,2922,398042,2395
    ,1179,267415,2635,661067,1701,1748,398772,2742,2391,330031
    ,1175,1611,200010,3749,527717,1452,2742,332397,2350,3222
    ,268949,3402,3493,133973,1386,464219,605,2349,334123,2709
    ,2890,267946,2773,592565,1210,2651,395863,1323,2707,265877]
    #—取当前公历年、月、日—
    wCurYear = st["year"]
    wCurMonth = st["mon"]
    wCurDay = st["day"]
    #—计算到初始时间1921年2月8日的天数：1921-2-8(正月初一)—
    #nTheDate = (wCurYear – 1921) * 365 + (wCurYear – 1921)/4 + wCurDay + wMonthAdd[wCurMonth] – 38
    nTheDate = (wCurYear-1921) * 365 + (wCurYear-1921)/4 + wCurDay + wMonthAdd[wCurMonth-1] -38
    if (((wCurYear % 4) == 0) and (wCurMonth > 2)):
        nTheDate = nTheDate + 1
    #–计算农历天干、地支、月、日—
    nIsEnd = 0
    m = 0
    while nIsEnd != 1:
        #if wNongliData[m+1] < 4095:
        if wNongliData[m] < 4095:
            k = 11
        else:
            k = 12
        n = k
        while n>=0:
            nBit = wNongliData[m]
            for i in range(n):
                nBit = math.floor(nBit/2);
            nBit = nBit % 2
            if nTheDate <= (29 + nBit):
                nIsEnd = 1
                break
            nTheDate = nTheDate- 29 - nBit
            n = n -1
        if nIsEnd != 0:
            break
        m = m + 1
    wCurYear = 1921 + m
    wCurMonth = k - n + 1
    wCurDay = int(math.floor(nTheDate))
    if k == 12:
        if wCurMonth == wNongliData[m] / 65536 + 1:
            wCurMonth = 1 - wCurMonth
        elif wCurMonth > wNongliData[m] / 65536 + 1:
            wCurMonth = wCurMonth - 1
    print '阳历', st["year"], st["mon"], st["day"]
    print '农历', wCurYear, wCurMonth, wCurDay
    #–生成农历天干、地支、属相 ==> wNongli–
    szShuXiang = cShuXiang[(((wCurYear - 4) % 60) % 12) + 1]
    szShuXiang = cShuXiang[(((wCurYear - 4) % 60) % 12) + 1]
    zNongli = szShuXiang + '(' + cTianGan[(((wCurYear - 4) % 60) % 10)] + cDiZhi[(((wCurYear - 4) % 60) % 12)] + ')年'
    #–szNongli,"%s(%s%s)年",szShuXiang,cTianGan[((wCurYear - 4) % 60) % 10],cDiZhi[((wCurYear - 4) % 60) % 12]);
    #–生成农历月、日 ==> wNongliDay–*/
    if wCurMonth < 1:
        szNongliDay =  "闰" + cMonName[(-1 * wCurMonth)]
    else:
        szNongliDay = cMonName[wCurMonth]
    szNongliDay =  szNongliDay + "月" + cDayName[wCurDay]
    print szNongliDay
    #return szNongli .. szNongliDay

def main():
    st = {"year": 1896, "mon": 9, "day": 14}
    GetDayOf(st)


main()

'''
#####


'''


# coding:utf-8

import datetime


class Lunar(object):
    # ******************************************************************************
    # 下面为阴历计算所需的数据,为节省存储空间,所以采用下面比较变态的存储方法.
    # ******************************************************************************
    # 数组g_lunar_month_day存入阴历1901年到2050年每年中的月天数信息，
    # 阴历每月只能是29或30天，一年用12（或13）个二进制位表示，对应位为1表30天，否则为29天
    g_lunar_month_day = [
        0x4ae0, 0xa570, 0x5268, 0xd260, 0xd950, 0x6aa8, 0x56a0, 0x9ad0, 0x4ae8, 0x4ae0,  # 1910
        0xa4d8, 0xa4d0, 0xd250, 0xd548, 0xb550, 0x56a0, 0x96d0, 0x95b0, 0x49b8, 0x49b0,  # 1920
        0xa4b0, 0xb258, 0x6a50, 0x6d40, 0xada8, 0x2b60, 0x9570, 0x4978, 0x4970, 0x64b0,  # 1930
        0xd4a0, 0xea50, 0x6d48, 0x5ad0, 0x2b60, 0x9370, 0x92e0, 0xc968, 0xc950, 0xd4a0,  # 1940
        0xda50, 0xb550, 0x56a0, 0xaad8, 0x25d0, 0x92d0, 0xc958, 0xa950, 0xb4a8, 0x6ca0,  # 1950
        0xb550, 0x55a8, 0x4da0, 0xa5b0, 0x52b8, 0x52b0, 0xa950, 0xe950, 0x6aa0, 0xad50,  # 1960
        0xab50, 0x4b60, 0xa570, 0xa570, 0x5260, 0xe930, 0xd950, 0x5aa8, 0x56a0, 0x96d0,  # 1970
        0x4ae8, 0x4ad0, 0xa4d0, 0xd268, 0xd250, 0xd528, 0xb540, 0xb6a0, 0x96d0, 0x95b0,  # 1980
        0x49b0, 0xa4b8, 0xa4b0, 0xb258, 0x6a50, 0x6d40, 0xada0, 0xab60, 0x9370, 0x4978,  # 1990
        0x4970, 0x64b0, 0x6a50, 0xea50, 0x6b28, 0x5ac0, 0xab60, 0x9368, 0x92e0, 0xc960,  # 2000
        0xd4a8, 0xd4a0, 0xda50, 0x5aa8, 0x56a0, 0xaad8, 0x25d0, 0x92d0, 0xc958, 0xa950,  # 2010
        0xb4a0, 0xb550, 0xb550, 0x55a8, 0x4ba0, 0xa5b0, 0x52b8, 0x52b0, 0xa930, 0x74a8,  # 2020
        0x6aa0, 0xad50, 0x4da8, 0x4b60, 0x9570, 0xa4e0, 0xd260, 0xe930, 0xd530, 0x5aa0,  # 2030
        0x6b50, 0x96d0, 0x4ae8, 0x4ad0, 0xa4d0, 0xd258, 0xd250, 0xd520, 0xdaa0, 0xb5a0,  # 2040
        0x56d0, 0x4ad8, 0x49b0, 0xa4b8, 0xa4b0, 0xaa50, 0xb528, 0x6d20, 0xada0, 0x55b0,  # 2050
    ]

    # 数组gLanarMonth存放阴历1901年到2050年闰月的月份，如没有则为0，每字节存两年
    g_lunar_month = [
        0x00, 0x50, 0x04, 0x00, 0x20,  # 1910
        0x60, 0x05, 0x00, 0x20, 0x70,  # 1920
        0x05, 0x00, 0x40, 0x02, 0x06,  # 1930
        0x00, 0x50, 0x03, 0x07, 0x00,  # 1940
        0x60, 0x04, 0x00, 0x20, 0x70,  # 1950
        0x05, 0x00, 0x30, 0x80, 0x06,  # 1960
        0x00, 0x40, 0x03, 0x07, 0x00,  # 1970
        0x50, 0x04, 0x08, 0x00, 0x60,  # 1980
        0x04, 0x0a, 0x00, 0x60, 0x05,  # 1990
        0x00, 0x30, 0x80, 0x05, 0x00,  # 2000
        0x40, 0x02, 0x07, 0x00, 0x50,  # 2010
        0x04, 0x09, 0x00, 0x60, 0x04,  # 2020
        0x00, 0x20, 0x60, 0x05, 0x00,  # 2030
        0x30, 0xb0, 0x06, 0x00, 0x50,  # 2040
        0x02, 0x07, 0x00, 0x50, 0x03  # 2050
    ]

    START_YEAR = 1901

    # 天干
    gan = '甲乙丙丁戊己庚辛壬癸'
    # 地支
    zhi = '子丑寅卯辰巳午未申酉戌亥'
    # 生肖
    xiao = '鼠牛虎兔龙蛇马羊猴鸡狗猪'
    # 月份
    lm = '正二三四五六七八九十冬腊'
    # 日份
    ld = '初一初二初三初四初五初六初七初八初九初十十一十二十三十四十五十六十七十八十九二十廿一廿二廿三廿四廿五廿六廿七廿八廿九三十'
    # 节气
    jie = '小寒大寒立春雨水惊蛰春分清明谷雨立夏小满芒种夏至小暑大暑立秋处暑白露秋分寒露霜降立冬小雪大雪冬至'

    def __init__(self, dt=None):
        '''初始化：参数为datetime.datetime类实例，默认当前时间'''
        self.localtime = dt if dt else datetime.datetime.today()

    def sx_year(self):  # 返回生肖年
        ct = self.localtime  # 取当前时间

        year = self.ln_year() - 3 - 1  # 农历年份减3 （说明：补减1）
        year = year % 12  # 模12，得到地支数
        return self.xiao[year]

    def gz_year(self):  # 返回干支纪年
        ct = self.localtime  # 取当前时间
        year = self.ln_year() - 3 - 1  # 农历年份减3 （说明：补减1）
        G = year % 10  # 模10，得到天干数
        Z = year % 12  # 模12，得到地支数
        return self.gan[G] + self.zhi[Z]

    def gz_month(self):  # 返回干支纪月（未实现）
        pass

    def gz_day(self):  # 返回干支纪日
        ct = self.localtime  # 取当前时间
        C = ct.year // 100  # 取世纪数，减一
        y = ct.year % 100  # 取年份后两位（若为1月、2月则当前年份减一）
        y = y - 1 if ct.month == 1 or ct.month == 2 else y
        M = ct.month  # 取月份（若为1月、2月则分别按13、14来计算）
        M = M + 12 if ct.month == 1 or ct.month == 2 else M
        d = ct.day  # 取日数
        i = 0 if ct.month % 2 == 1 else 6  # 取i （奇数月i=0，偶数月i=6）

        # 下面两个是网上的公式
        # http://baike.baidu.com/link?url=MbTKmhrTHTOAz735gi37tEtwd29zqE9GJ92cZQZd0X8uFO5XgmyMKQru6aetzcGadqekzKd3nZHVS99rewya6q
        # 计算干（说明：补减1）
        G = 4 * C + C // 4 + 5 * y + y // 4 + 3 * (M + 1) // 5 + d - 3 - 1
        G = G % 10
        # 计算支（说明：补减1）
        Z = 8 * C + C // 4 + 5 * y + y // 4 + 3 * (M + 1) // 5 + d + 7 + i - 1
        Z = Z % 12

        # 返回 干支纪日
        return self.gan[G] + self.zhi[Z]

    def gz_hour(self):  # 返回干支纪时（时辰）
        ct = self.localtime  # 取当前时间
        # 计算支
        Z = round((ct.hour / 2) + 0.1) % 12  # 之所以加0.1是因为round的bug!!
        Z = int(Z)
        # 返回 干支纪时（时辰）
        return self.zhi[Z]

    def ln_year(self):  # 返回农历年
        year, _, _ = self.ln_date()
        return year

    def ln_month(self):  # 返回农历月
        _, month, _ = self.ln_date()
        return month

    def ln_day(self):  # 返回农历日
        _, _, day = self.ln_date()
        return day

    def ln_date(self):  # 返回农历日期整数元组（年、月、日）（查表法）
        delta_days = self._date_diff()

        # 阳历1901年2月19日为阴历1901年正月初一
        # 阳历1901年1月1日到2月19日共有49天
        if (delta_days < 49):
            year = self.START_YEAR - 1
            if (delta_days < 19):
                month = 11;
                day = 11 + delta_days
            else:
                month = 12;
                day = delta_days - 18
            return (year, month, day)

        # 下面从阴历1901年正月初一算起
        delta_days -= 49
        year, month, day = self.START_YEAR, 1, 1
        # 计算年
        tmp = self._lunar_year_days(year)
        while delta_days >= tmp:
            delta_days -= tmp
            year += 1
            tmp = self._lunar_year_days(year)

        # 计算月
        (foo, tmp) = self._lunar_month_days(year, month)
        while delta_days >= tmp:
            delta_days -= tmp
            if (month == self._get_leap_month(year)):
                (tmp, foo) = self._lunar_month_days(year, month)
                if (delta_days < tmp):
                    return (0, 0, 0)
                delta_days -= tmp
            month += 1
            (foo, tmp) = self._lunar_month_days(year, month)

        # 计算日
        day += delta_days
        return (year, month, day)

    def ln_date_str(self):  # 返回农历日期字符串，形如：农历正月初九
        _, month, day = self.ln_date()
        return '农历{}月{}'.format(self.lm[month - 1], self.ld[(day - 1) * 2:day * 2])

    def ln_jie(self):  # 返回农历节气
        ct = self.localtime  # 取当前时间
        year = ct.year
        for i in range(24):
            # 因为两个都是浮点数，不能用相等表示
            delta = self._julian_day() - self._julian_day_of_ln_jie(year, i)
            if -.5 <= delta <= .5:
                return self.jie[i * 2:(i + 1) * 2]
        return ''

    # 显示日历
    def calendar(self):
        pass

    #######################################################
    #            下面皆为私有函数
    #######################################################

    def _date_diff(self):
        '''返回基于1901/01/01日差数'''
        return (self.localtime - datetime.datetime(1901, 1, 1)).days

    def _get_leap_month(self, lunar_year):
        flag = self.g_lunar_month[(lunar_year - self.START_YEAR) // 2]
        if (lunar_year - self.START_YEAR) % 2:
            return flag & 0x0f
        else:
            return flag >> 4

    def _lunar_month_days(self, lunar_year, lunar_month):
        if (lunar_year < self.START_YEAR):
            return 30

        high, low = 0, 29
        iBit = 16 - lunar_month;

        if (lunar_month > self._get_leap_month(lunar_year) and self._get_leap_month(lunar_year)):
            iBit -= 1

        if (self.g_lunar_month_day[lunar_year - self.START_YEAR] & (1 << iBit)):
            low += 1

        if (lunar_month == self._get_leap_month(lunar_year)):
            if (self.g_lunar_month_day[lunar_year - self.START_YEAR] & (1 << (iBit - 1))):
                high = 30
            else:
                high = 29

        return (high, low)

    def _lunar_year_days(self, year):
        days = 0
        for i in range(1, 13):
            (high, low) = self._lunar_month_days(year, i)
            days += high
            days += low
        return days

    # 返回指定公历日期的儒略日（http://blog.csdn.net/orbit/article/details/9210413）
    def _julian_day(self):
        ct = self.localtime  # 取当前时间
        year = ct.year
        month = ct.month
        day = ct.day

        if month <= 2:
            month += 12
            year -= 1

        B = year / 100
        B = 2 - B + year / 400

        dd = day + 0.5000115740  # 本日12:00后才是儒略日的开始(过一秒钟)*/
        return int(365.25 * (year + 4716) + 0.01) + int(30.60001 * (month + 1)) + dd + B - 1524.5

        # 返回指定年份的节气的儒略日数（http://blog.csdn.net/orbit/article/details/9210413）

    def _julian_day_of_ln_jie(self, year, st):
        s_stAccInfo = [
            0.00, 1272494.40, 2548020.60, 3830143.80, 5120226.60, 6420865.80,
            7732018.80, 9055272.60, 10388958.00, 11733065.40, 13084292.40, 14441592.00,
            15800560.80, 17159347.20, 18513766.20, 19862002.20, 21201005.40, 22529659.80,
            23846845.20, 25152606.00, 26447687.40, 27733451.40, 29011921.20, 30285477.60]

        # 已知1900年小寒时刻为1月6日02:05:00
        base1900_SlightColdJD = 2415025.5868055555

        if (st < 0) or (st > 24):
            return 0.0

        stJd = 365.24219878 * (year - 1900) + s_stAccInfo[st] / 86400.0

        return base1900_SlightColdJD + stJd


# 测试
def test(ct=None):
    ln = Lunar(ct)
    print('公历 {}  北京时间 {}'.format(ln.localtime.date(), ln.localtime.time()))
    print('{} 【{}】 {}年 {}日 {}时'.format(ln.ln_date_str(), ln.gz_year(), ln.sx_year(), ln.gz_day(), ln.gz_hour()))
    print('节气：{}'.format(ln.ln_jie()))


if __name__ == '__main__':
    ct = datetime.datetime(1988, 9, 14, 5, 30, 10)
    test(ct)
'''
#####

